{
    "hints": {
        "init(uint16)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "register()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "place_order(uint16,uint64,uint16,uint16)uint16": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "exec_order(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYXRvbV90cmFkZS5jb250cmFjdC5BdG9tVHJhZGUuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "tinyman_app_id": {
                    "type": "bytes",
                    "key": "tinyman_app_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AtomTrade",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "uint16",
                        "name": "tinyman_app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "register",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Registers the user for AtomTrade.\nIf the user is already registered, does nothing."
            },
            {
                "name": "place_order",
                "args": [
                    {
                        "type": "uint16",
                        "name": "limit_price"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint16",
                        "name": "asset_id"
                    },
                    {
                        "type": "uint16",
                        "name": "stop_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint16",
                    "desc": "The ID of the newly placed order."
                },
                "desc": "Places a new order for the user.\nThe order will be added with the specified limit price, amount, asset ID, and stop price. The status of the order is initially set to \"open\". If the current price is checked and found to be lower than the limit price, the order will be filled. If the current price is higher than the stop price, the order will be canceled."
            },
            {
                "name": "exec_order",
                "args": [
                    {
                        "type": "uint64",
                        "name": "order_id",
                        "desc": "The ID of the order to execute"
                    },
                    {
                        "type": "address",
                        "name": "user",
                        "desc": "The user to execute the order for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void",
                    "desc": "None"
                },
                "desc": "Executes the order with the specified order ID for the given user.\nIf the user has no orders, does nothing. If the user has an order with the specified order ID, checks current price in tinyman directly in contract or offchain if needed, and if the current price is lower than the limit price, fills the order. If the current price is higher than the stop price, cancels the order."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}