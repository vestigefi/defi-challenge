{
  "version": 3,
  "sources": [
    "../../limit_order/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;AAQK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAQK;;;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;AAsBK;;;AAAA;AAAA;AAkBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAQA;;AAAA;AAAA;AAAA;;AAAA;AAhDL;;;AAAA;AAAA;;;AAAA;AAgDK;;;AAAA;AAAA;AAhDL;AAAA;AAQA;;;AAKQ;;AAAA;AACO;;AAAa;;AAAb;AAAP;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAgB;AAAhB;;AAER;;;AAKe;AAAA;AAAA;AAAA;AAAP;AACuB;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAP;AACO;;AAA2B;AAAA;AAAA;AAAA;AAA3B;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;;AACF;AAAA;;AAAA;AAAA;;;;;;;AAHjB;;;;AAAA;;;AAAA;AAMA;AAAgB;AAAhB;;AAER;;;AAKe;AAAA;AAAA;AAAA;AAAP;AACA;AAAgB;AAAhB;;AAER;;;AAKe;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AACO;;AAAgB;;AAAhB;AAAP;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.approval_program",
      "params": {},
      "block": "smart_contracts.limit_order.contract.LimitOrder.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"isActive\" \"limitPrice\" \"expiryTime\" \"assetID\" \"orderAmount\""
    },
    "58": {
      "callsub": "smart_contracts.limit_order.contract.LimitOrder.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "61": {
      "op": "return",
      "stack_out": []
    },
    "62": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "65": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "bz __puya_arc4_router___after_if_else@9",
      "stack_out": []
    },
    "70": {
      "op": "pushbytess 0xf4548ab2 0xbd3605c8 0x11734f27 0xdfac7146 // method \"createApplication(asset,uint64,uint64,uint64)void\", method \"executeOrder(uint64)void\", method \"cancelOrder()void\", method \"updateOrder(uint64,uint64)void\""
    },
    "92": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(cancelOrder()void)",
        "Method(createApplication(asset,uint64,uint64,uint64)void)",
        "Method(executeOrder(uint64)void)",
        "Method(updateOrder(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(asset,uint64,uint64,uint64)void)",
        "Method(executeOrder(uint64)void)",
        "Method(cancelOrder()void)",
        "Method(updateOrder(uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "95": {
      "op": "match __puya_arc4_router___createApplication_route@2 __puya_arc4_router___executeOrder_route@3 __puya_arc4_router___cancelOrder_route@4 __puya_arc4_router___updateOrder_route@5",
      "stack_out": []
    },
    "105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "106": {
      "retsub": true,
      "op": "retsub"
    },
    "107": {
      "block": "__puya_arc4_router___createApplication_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "109": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "110": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "114": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "115": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "118": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "119": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "124": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "125": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "128": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "129": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "132": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "133": {
      "callsub": "smart_contracts.limit_order.contract.LimitOrder.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "137": {
      "retsub": true,
      "op": "retsub"
    },
    "138": {
      "block": "__puya_arc4_router___executeOrder_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "140": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "141": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "142": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "144": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "145": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "148": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "149": {
      "callsub": "smart_contracts.limit_order.contract.LimitOrder.executeOrder",
      "op": "callsub executeOrder",
      "stack_out": []
    },
    "152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "153": {
      "retsub": true,
      "op": "retsub"
    },
    "154": {
      "block": "__puya_arc4_router___cancelOrder_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "156": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "157": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "callsub": "smart_contracts.limit_order.contract.LimitOrder.cancelOrder",
      "op": "callsub cancelOrder"
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "165": {
      "retsub": true,
      "op": "retsub"
    },
    "166": {
      "block": "__puya_arc4_router___updateOrder_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "177": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%33#0"
      ]
    },
    "181": {
      "callsub": "smart_contracts.limit_order.contract.LimitOrder.updateOrder",
      "op": "callsub updateOrder",
      "stack_out": []
    },
    "184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "block": "__puya_arc4_router___after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "187": {
      "retsub": true,
      "op": "retsub"
    },
    "188": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.createApplication",
      "params": {
        "assetID#0": "uint64",
        "limitPrice#0": "uint64",
        "orderAmount#0": "uint64",
        "expiryTime#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "191": {
      "op": "frame_dig -3",
      "defined_out": [
        "limitPrice#0 (copy)"
      ],
      "stack_out": [
        "limitPrice#0 (copy)"
      ]
    },
    "193": {
      "error": "Limit price must be positive",
      "op": "assert // Limit price must be positive",
      "stack_out": []
    },
    "194": {
      "op": "frame_dig -1"
    },
    "196": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "expiryTime#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "expiryTime#0 (copy)",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "199": {
      "error": "Expiry must be in the future",
      "op": "assert // Expiry must be in the future",
      "stack_out": []
    },
    "200": {
      "op": "bytec_3 // \"assetID\"",
      "defined_out": [
        "\"assetID\""
      ],
      "stack_out": [
        "\"assetID\""
      ]
    },
    "201": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"assetID\"",
        "assetID#0 (copy)"
      ],
      "stack_out": [
        "\"assetID\"",
        "assetID#0 (copy)"
      ]
    },
    "203": {
      "op": "app_global_put",
      "stack_out": []
    },
    "204": {
      "op": "bytec_1 // \"limitPrice\"",
      "defined_out": [
        "\"limitPrice\""
      ],
      "stack_out": [
        "\"limitPrice\""
      ]
    },
    "205": {
      "op": "frame_dig -3",
      "stack_out": [
        "\"limitPrice\"",
        "limitPrice#0 (copy)"
      ]
    },
    "207": {
      "op": "app_global_put",
      "stack_out": []
    },
    "208": {
      "op": "bytec 4 // \"orderAmount\"",
      "defined_out": [
        "\"orderAmount\""
      ],
      "stack_out": [
        "\"orderAmount\""
      ]
    },
    "210": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"orderAmount\"",
        "orderAmount#0 (copy)"
      ],
      "stack_out": [
        "\"orderAmount\"",
        "orderAmount#0 (copy)"
      ]
    },
    "212": {
      "op": "app_global_put",
      "stack_out": []
    },
    "213": {
      "op": "bytec_2 // \"expiryTime\"",
      "defined_out": [
        "\"expiryTime\""
      ],
      "stack_out": [
        "\"expiryTime\""
      ]
    },
    "214": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"expiryTime\"",
        "expiryTime#0 (copy)"
      ]
    },
    "216": {
      "op": "app_global_put",
      "stack_out": []
    },
    "217": {
      "op": "bytec_0 // \"isActive\"",
      "defined_out": [
        "\"isActive\""
      ],
      "stack_out": [
        "\"isActive\""
      ]
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"isActive\"",
        "1"
      ],
      "stack_out": [
        "\"isActive\"",
        "1"
      ]
    },
    "219": {
      "op": "app_global_put",
      "stack_out": []
    },
    "220": {
      "retsub": true,
      "op": "retsub"
    },
    "221": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.executeOrder",
      "params": {
        "currentPrice#0": "uint64"
      },
      "block": "executeOrder",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "224": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "225": {
      "op": "bytec_0 // \"isActive\"",
      "defined_out": [
        "\"isActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isActive\""
      ]
    },
    "226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "227": {
      "error": "check self.isActive exists",
      "op": "assert // check self.isActive exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "228": {
      "error": "Order is inactive",
      "op": "assert // Order is inactive",
      "stack_out": []
    },
    "229": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "230": {
      "op": "bytec_1 // \"limitPrice\"",
      "defined_out": [
        "\"limitPrice\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"limitPrice\""
      ]
    },
    "231": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "232": {
      "error": "check self.limitPrice exists",
      "op": "assert // check self.limitPrice exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "233": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentPrice#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "currentPrice#0 (copy)"
      ]
    },
    "235": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "236": {
      "error": "Current price is below the limit price",
      "op": "assert // Current price is below the limit price",
      "stack_out": []
    },
    "237": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "240": {
      "op": "bytec_2 // \"expiryTime\"",
      "defined_out": [
        "\"expiryTime\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"expiryTime\""
      ]
    },
    "241": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "242": {
      "error": "check self.expiryTime exists",
      "op": "assert // check self.expiryTime exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "243": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "244": {
      "error": "Order has expired",
      "op": "assert // Order has expired",
      "stack_out": []
    },
    "245": {
      "op": "itxn_begin"
    },
    "246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "247": {
      "op": "bytec_3 // \"assetID\"",
      "defined_out": [
        "\"assetID\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetID\""
      ]
    },
    "248": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "249": {
      "error": "check self.assetID exists",
      "op": "assert // check self.assetID exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "250": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "253": {
      "op": "bytec 4 // \"orderAmount\"",
      "defined_out": [
        "\"orderAmount\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"orderAmount\""
      ]
    },
    "255": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "256": {
      "error": "check self.orderAmount exists",
      "op": "assert // check self.orderAmount exists",
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "257": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "259": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "261": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "263": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "265": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "268": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "270": {
      "op": "itxn_submit"
    },
    "271": {
      "op": "bytec_0 // \"isActive\"",
      "stack_out": [
        "\"isActive\""
      ]
    },
    "272": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"isActive\"",
        "0"
      ]
    },
    "273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.cancelOrder",
      "params": {},
      "block": "cancelOrder",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "279": {
      "op": "bytec_0 // \"isActive\"",
      "defined_out": [
        "\"isActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isActive\""
      ]
    },
    "280": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "281": {
      "error": "check self.isActive exists",
      "op": "assert // check self.isActive exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "282": {
      "error": "Order is already inactive",
      "op": "assert // Order is already inactive",
      "stack_out": []
    },
    "283": {
      "op": "bytec_0 // \"isActive\"",
      "stack_out": [
        "\"isActive\""
      ]
    },
    "284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"isActive\"",
        "0"
      ]
    },
    "285": {
      "op": "app_global_put",
      "stack_out": []
    },
    "286": {
      "retsub": true,
      "op": "retsub"
    },
    "287": {
      "subroutine": "smart_contracts.limit_order.contract.LimitOrder.updateOrder",
      "params": {
        "newLimitPrice#0": "uint64",
        "newExpiryTime#0": "uint64"
      },
      "block": "updateOrder",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "291": {
      "op": "bytec_0 // \"isActive\"",
      "defined_out": [
        "\"isActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"isActive\""
      ]
    },
    "292": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "293": {
      "error": "check self.isActive exists",
      "op": "assert // check self.isActive exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "294": {
      "error": "Cannot update an inactive order",
      "op": "assert // Cannot update an inactive order",
      "stack_out": []
    },
    "295": {
      "op": "frame_dig -2",
      "defined_out": [
        "newLimitPrice#0 (copy)"
      ],
      "stack_out": [
        "newLimitPrice#0 (copy)"
      ]
    },
    "297": {
      "error": "Limit price must be positive",
      "op": "assert // Limit price must be positive",
      "stack_out": []
    },
    "298": {
      "op": "frame_dig -1"
    },
    "300": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "newExpiryTime#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "newExpiryTime#0 (copy)",
        "tmp%1#0"
      ]
    },
    "302": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "303": {
      "error": "Expiry must be in the future",
      "op": "assert // Expiry must be in the future",
      "stack_out": []
    },
    "304": {
      "op": "bytec_1 // \"limitPrice\"",
      "defined_out": [
        "\"limitPrice\""
      ],
      "stack_out": [
        "\"limitPrice\""
      ]
    },
    "305": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"limitPrice\"",
        "newLimitPrice#0 (copy)"
      ]
    },
    "307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "308": {
      "op": "bytec_2 // \"expiryTime\"",
      "defined_out": [
        "\"expiryTime\""
      ],
      "stack_out": [
        "\"expiryTime\""
      ]
    },
    "309": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"expiryTime\"",
        "newExpiryTime#0 (copy)"
      ]
    },
    "311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "312": {
      "retsub": true,
      "op": "retsub"
    }
  }
}